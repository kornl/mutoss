?sink   # And
?savehistory
?history

============================================

Hi,

This is a dangerous game you are playing. I would play with the call stack, i.e sys.calls :

setMethod("fun","character",
  definition = function(y,x,...){
       
         stack <- sys.calls( )
         stack.fun <- Filter( function(.) .[[1]] == as.name("fun"), stack )
         nameOfY <- deparse( stack.fun[[1]][[2]] )
         cat("name is '",nameOfY, "'\n" , sep = "" )
 }
)

> titi <- "aze"
> fun( titi )
name is 'titi'
> fun( letters[1:4] )
name is 'letters[1:4]'

Romain


Le 25/05/10 14:54, cgenolin a Ã©crit :

    Hi all,

    In a function, I need to get the name of a variable that has been used to
    call the function.
    For example, I want:

    --- 8<  ------
    toto<- 3
    fun<- function(y){
       nameOfY<-deparse(substitute(y))
       cat("name is ",nameOfY)
    }
    fun(toto)

    # [1] name is toto

    --- 8<  ----

    But deparse(substitute(y)) does not work all the time, especially when we
    use generic function.

    --- 8<  ----

    setGeneric("fun",function(y,...){standardGeneric("fun")})

    setMethod("fun","numeric",
       definition = function(y,...){
          nameOfY<-deparse(substitute(y))
          cat("name is ",nameOfY)
      }
    )

    toto<- 4
    fun(toto)
    # name is toto

    setMethod("fun","character",
       definition = function(y,x,...){
          nameOfY<-deparse(substitute(y))
          cat("name is ",nameOfY)
      }
    )

    titi<- "aze"
    fun(titi)
    # name is y

    --- 8<  ----

    So is there a way to get the name of the variable "toto" or "titi" in a way
    that work in all cases?

    Christophe

============================================

I am a little bit surprised by the following output of
'formals'. Is this the intended behavior?

> f <- function(a=1,b=-1) { a+b }
> class(formals(f)$a)
[1] "numeric"
> class(formals(f)$b)
[1] "call"

On Mon, 24 May 2010, Josef Leydold wrote:

    Dear Brian and Uwe,

    Thanks a lot for the clarification.
    I made the naive assumption that numeric constants in R are similar to
    those in C.

    Two questions still remain:

    (1) when I have a function

      f<- function(a=1,b=-1) { a+b }

      is it safe to use

      val <- as.character(deparse(formals(f)$b))

      to obtain a string that contains the default value for
      argument "b". (Does is also work for other arguments with some
      default of arbitrary class?)

But the defualt value is not character, so this cannot in general be done.

    (2) I have seen that packages like gWidget (in function ggenericwidget)
      use a statement like

      switch(class(formals(f)$b),
           numeric = { .... },
          character = { .... },
          class = { .... }, ....

      for automatically processing function arguments.
      in the case of "b=-1" this procedure obviously fails.
      (I found this behavior of 'formals' while playing around with
      packages "gWidgets" and "fgui" from CRAN).

      Is there a safe workaround for this problem?

      That is, is there a safe function that returns class
      "numeric" for an exresion like "-1" or "-Inf"?


Why are you using class() when you seem to mean typeof()?

But the short answer is you appear to be trying to circumvent the language, and who really cares what the default is? 
If it is used, it is evaluated, and then you can simply do typeof(b).  And if it is not used, who cares what it is?

============================================

Look at txtStart and friends in the TeachingDemos package as an alternative to sink that includes commands as well as output.

Know the quality of Greg Snows work it will probably be better than mine, but perhaps:

> capfn <- function(inp) {
+          instring <- deparse(substitute(inp))
+          capture.output(instring, inp, file="all.Rout") }
> capfn(1+3)

The file looks like this:

[1] "1 + 3"
[1] 4

============================================

http://pbil.univ-lyon1.fr/library/Biobase/html/exprSet-class.html

============================================

      [R] How to show all the functions and classes that are defined in a library?

      >>library(some_library_name)

      >>Suppose I load a library.

      You mean "package" right ?

      A library is a set of packages

      >I'm wondering what command I should use to

      >list all the functions, classes and variables defined in the library.

      Check ?ls :

      > ls( "package:some_package_name" )

      > ls( "package:some_package_name", all = TRUE )

      Sometimes you want to see even those that are not exported from the namespace:

      > ls( asNamespace( "some_package_name" ) )

      > ls( asNamespace( "some_package_name" ), all = TRUE )

	Romain

      So mutoss.* functions don't need to be exported any more.
      
============================================

From: https://stat.ethz.ch/pipermail/r-devel/2009-March/052872.html

Hi Whit --

Whit writes:

> for the moment, I'm using:
>
> .onAttach <- function(libname, pkgname) {
>     .bbg.db.conn <<- dbConnect(dbDriver("PostgreSQL"), user="blah","blah")
> }
>
> .onUnload <- function(libpath) {
>     dbDisconnect(.bbg.db.conn)
> }
>
>
> which results in a hidden global variable in the global environment.
>
> I would prefer to make the assignment only in the package namespace.
> I've looked at assignInNamespace, but I can't seem to make it work.
>
> Is there a preferred method for doing this?

I don't konw about preferred, but one method is

pkgVars <- local({
    x <- NULL
    list(getX=function() x, setX=function(value) x <<- value)
})

with use

> pkgVars$getX()
NULL
> pkgVars$setX(123)
> pkgVars$getX()
[1] 123

This introduces a different programming paradigm (a list of functions)
that might not be familiar for end-users and is not readily amenable
to documentation. A probably better way is

pkgVars <- new.env(parent=emptyenv())
getX <- function() get("x", pkgVars, inherits=FALSE)
setX <- function(value) assign("x", value, envir=pkgVars)

> getX()
Error in get("x", pkgVars, inherits = FALSE) : object 'x' not found
> setX(123)
> getX()
[1] 123

A tidier response to the first getX() could be arranged with something
like

pkgVars <- local({
    env <- new.env(parent=emptyenv())
    env[["x"]] <- NULL
    env
})

pkgVars, getX, and setX can be exported from the name space or not.

FWIW, usually one wants .onLoad rather than .onAttach, so that a
package import-ing your package (not just depend-ing, or when used
directly in an interactive session) will execute the setup code.

Hope that helps and is not too misleading.

Martin

> When I try adding an assignment directly in the source file, I get the
> "cannot change value of locked binding" error.
>
> What am I missing?
>
> Thanks,
> Whit
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

